{"version":3,"sources":["../../src/Constants/chart.constants.ts","../../src/Components/Chart/chartBar.component.tsx","../../src/Components/Chart/chartLine.component.tsx","../../src/Components/Chart/chartPie.component.tsx","../../src/Components/Chart/chartArea.component.tsx","../../src/Components/Chart/chartComposed.component.tsx","../../src/Utils/common.utils.tsx","../../src/Components/Chart/chartDonut.component.tsx","../../src/Components/Chart/chartColumn.component.tsx","../../src/Components/Chart/chart.component.tsx","../../src/Utils/chartHelper.utils.tsx","../../src/Components/Collapse/collapse.component.tsx","../../src/Components/ChartBuilder/builderSettings.component.tsx","../../src/Components/ChartBuilder/chartBuilder.component.tsx","App.tsx","index.tsx"],"names":["ChartColors","pie","bar","line","area","ChartItems","key","name","ChartCategories","charts","ChartBar","data","stacked","showCartesianGrid","width","debounce","aspect","height","vertical","strokeDasharray","dataKey","React","Object","stackId","fill","index","ChartLine","type","stroke","ChartPie","data2","nameKey","cx","cy","outerRadius","innerRadius","label","labelLine","ChartArea","ChartComposed","def","IsArray","Array","toSelectOptions","values","item","value","getOptionFromValue","currentValue","options","option","ChartDonut","ChartColumn","layout","horizontal","Chart","props","className","getChartComponent","pieChartSettings","settings","valueType","defaultValue","getStringKeysFromData","keys","isClearable","getNumberKeysFromData","lineChartSettings","columnChartSettings","Collapse","title","children","collapse","onChange","useState","collapsed","setCollapsed","useEffect","onClick","easing","duration","BuilderSettings","onSettingChange","settingsData","setSettingsData","activeCollapse","setActiveCollapse","currentSettings","setCurrentSettings","currentChart","setCurrentChart","getChartSettings","newSettings","getDefaultSettings","prevSettings","newObj","obj2","obj1","mergeLeftObjects","handleActiveCollapse","inputs","getInputSettingsOnly","chart","defaultVal","input","getSettingsComponent","setting","isEmptyObject","handleSettingsChange","chartCat","chartObj","object","ChartBuilder","settingData","chartData","setChartData","chartSettings","setChartSettings","newChartData","getPieChartData","getLineChartData","App","setSettings","style","margin","border","date","sales","profit","aggregate","id","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.487e7acf.chunk.js","sourcesContent":["export const ChartColors = {\n    pie: [\n        '#ffa860',\n        '#a8d8a8',\n        '#3090c0',\n        '#f07848',\n        '#60c0a8',\n        '#a8c0a8',\n        '#ff6060',\n        '#f0f0a8',\n        '#483030',\n        '#786048',\n    ],\n    bar: ['#ffa860', '#a8d8a8', '#3090c0', '#f07848', '#a8c0a8'],\n    line: ['#ffa860', '#a8d8a8', '#3090c0', '#f07848', '#a8c0a8'],\n    area: ['#f07848', '#a8d8a8', '#3090c0', '#a8c0a8', '#ffa860'],\n}\n\n// API CHART DATA TYPES\nexport const TYPE_CHART_BAR = 57\nexport const TYPE_CHART_BAR_STACKED = 58\nexport const TYPE_CHART_PIE = 59\nexport const TYPE_CHART_LINE = 60\n\n// API CHART ROW TYPE\nexport const ROW_CHART_HALF = 61\nexport const ROW_CHART_FULL = 61\n\n// API CHART POSITIONS\nexport const POS_CHART_VISIBLE = 63\nexport const POS_CHART_HEADER_OPTION = 64\nexport const POS_CHART_HEADER = 65\n\nexport const ChartItems = [\n    {\n        key: 'pie',\n        name: 'Pie',\n    },\n    {\n        key: 'donut',\n        name: 'Donut',\n    },\n    {\n        key: 'line',\n        name: 'Line',\n    },\n    {\n        key: 'bar',\n        name: 'Bar',\n    },\n    {\n        key: 'stackedBar',\n        name: 'Stacked Bar',\n    },\n    {\n        key: 'column',\n        name: 'Column',\n    },\n    {\n        key: 'stackedColumn',\n        name: 'Stacked Column',\n    },\n    {\n        key: 'area',\n        name: 'Area',\n    },\n]\n\nexport const ChartCategories = [\n    {\n        name: 'Most popular',\n        charts: ['pie', 'bar', 'line', 'area'],\n    },\n    {\n        name: 'Pie',\n        charts: ['pie', 'donut'],\n    },\n    {\n        name: 'Line',\n        charts: ['line'],\n    },\n    {\n        name: 'Bar',\n        charts: ['bar'],\n    },\n    {\n        name: 'Column',\n        charts: ['column'],\n    },\n    {\n        name: 'Area',\n        charts: ['area'],\n    },\n]\n","import React from 'react'\nimport {\n    Bar,\n    BarChart,\n    CartesianGrid,\n    Cell,\n    ResponsiveContainer,\n    Tooltip,\n    XAxis,\n    YAxis,\n} from 'recharts'\nimport { ChartColors } from '../../Constants/chart.constants'\nimport { CHART_DATA_TYPES } from '../../Dtos/chart'\n\n/**\n * ChartBar component to render bar chart.\n *\n * @param data CHART_DATA_TYPES[]\n * @returns ReactElement\n */\nconst ChartBar: React.FC<{\n    data: CHART_DATA_TYPES[]\n    stacked?: boolean\n    showCartesianGrid?: boolean\n}> = ({ data, stacked, showCartesianGrid = true }) => {\n    return (\n        <ResponsiveContainer width='100%' debounce={5} aspect={2}>\n            <BarChart width={300} height={300} data={data}>\n                {showCartesianGrid && <CartesianGrid vertical={false} strokeDasharray='3 3' />}\n                <XAxis dataKey='label' />\n                <YAxis />\n                <Tooltip />\n\n                {Object.keys(data[0]).length > 2 ? (\n                    Object.keys(data[0]).map((key) => {\n                        if (key !== 'label') {\n                            return (\n                                <Bar key={key} stackId={stacked ? 'stacked' : key} dataKey={key} />\n                            )\n                        }\n                        return null\n                    })\n                ) : (\n                    <Bar dataKey='value' fill={ChartColors.bar[0]}>\n                        {data.map((_, index) => (\n                            <Cell\n                                key={`cell-${index}`}\n                                fill={ChartColors.bar[index % ChartColors.bar.length]}\n                            />\n                        ))}\n                    </Bar>\n                )}\n            </BarChart>\n        </ResponsiveContainer>\n    )\n}\n\nexport default ChartBar\n","import React from 'react'\nimport { CartesianGrid, Legend, Line, LineChart, ResponsiveContainer, Tooltip, XAxis, YAxis } from 'recharts';\nimport {ChartColors} from '../../Constants/chart.constants';\nimport { CHART_DATA_TYPES } from '../../Dtos/chart';\n\ninterface ChartLineProps {\n    data: CHART_DATA_TYPES[],\n    showCartesianGrid?: boolean,\n}\n\n/**\n * ChartLine component to render line chart.\n * \n * @param data CHART_DATA_TYPES[]\n * @returns ReactElement\n */\nconst ChartLine:React.FC<ChartLineProps> = ({ data, showCartesianGrid=true }) => {\n    return (\n        <ResponsiveContainer width='100%' debounce={5} aspect={2}>\n            <LineChart width={300} height={300} data={data}>\n                { showCartesianGrid && <CartesianGrid vertical={false} strokeDasharray=\"3 3\" /> }\n                <XAxis dataKey=\"label\" />\n                <YAxis />\n                <Tooltip />\n                { Object.keys(data[0]).map(( key, index ) => {\n                    if( key !== 'label' ) {\n                        return <Line key={key} type=\"monotone\" dataKey={key} stroke={ChartColors.line[index]}/>\n                    }\n                    return null;\n                }) }\n            </LineChart>\n        </ResponsiveContainer>\n    )\n}\n\nexport default ChartLine;\n","import React from \"react\";\nimport {\n    Cell,\n    Legend,\n    Pie,\n    PieChart,\n    ResponsiveContainer,\n    Tooltip,\n} from \"recharts\";\nimport { ChartColors } from \"../../Constants/chart.constants\";\nimport { CHART_DATA_TYPES } from \"../../Dtos/chart\";\n\n/**\n * ChartPie component to render pie chart.\n *\n * @param data CHART_DATA_TYPES[]\n * @returns ReactElement\n */\nconst ChartPie: React.FC<{\n    data: CHART_DATA_TYPES[];\n    data2?: CHART_DATA_TYPES[];\n}> = ({ data, data2 }) => {\n    if (!data2) {\n        return (\n            <ResponsiveContainer width=\"100%\" debounce={5} aspect={2}>\n                <PieChart width={300} height={300}>\n                    <Pie\n                        data={data}\n                        dataKey=\"value\"\n                        nameKey=\"label\"\n                        fill={ChartColors.pie[0]}\n                        label\n                        labelLine={false}\n                    >\n                        {data.map((_, index) => (\n                            <Cell\n                                key={`cell-${index}`}\n                                fill={\n                                    ChartColors.pie[\n                                        index % ChartColors.pie.length\n                                    ]\n                                }\n                            />\n                        ))}\n                    </Pie>\n                    <Tooltip />\n                    <Legend />\n                </PieChart>\n            </ResponsiveContainer>\n        );\n    } else {\n        return (\n            <ResponsiveContainer width=\"100%\" debounce={2} aspect={2}>\n                <PieChart width={300} height={300}>\n                    <Pie\n                        data={data}\n                        dataKey=\"value\"\n                        nameKey=\"name\"\n                        cx=\"50%\"\n                        cy=\"50%\"\n                        outerRadius=\"60%\"\n                        fill={ChartColors.pie[0]}\n                    />\n                    <Pie\n                        data={data2}\n                        dataKey=\"value\"\n                        nameKey=\"name\"\n                        cx=\"50%\"\n                        cy=\"50%\"\n                        innerRadius=\"70%\"\n                        outerRadius=\"80%\"\n                        fill={ChartColors.pie[1]}\n                        label\n                    />\n                    <Tooltip />\n                </PieChart>\n            </ResponsiveContainer>\n        );\n    }\n};\n\nexport default ChartPie;\n","import React from 'react'\nimport {\n    Area,\n    AreaChart,\n    CartesianGrid,\n    Legend,\n    ResponsiveContainer,\n    Tooltip,\n    XAxis,\n    YAxis,\n} from 'recharts'\nimport { ChartColors } from '../../Constants/chart.constants'\nimport { CHART_DATA_TYPES } from '../../Dtos/chart'\n\ninterface ChartAreaProps {\n    data: CHART_DATA_TYPES[]\n    showCartesianGrid?: boolean\n}\n\n/**\n * ChartArea component to render area chart.\n *\n * @param data CHART_DATA_TYPES[]\n * @returns ReactElement\n */\nconst ChartArea: React.FC<ChartAreaProps> = ({ data, showCartesianGrid = true }) => {\n    return (\n        <ResponsiveContainer width='100%' debounce={5} aspect={2}>\n            <AreaChart width={300} height={300} data={data}>\n                {showCartesianGrid && <CartesianGrid strokeDasharray='3 3' />}\n                <XAxis dataKey='label' />\n                <YAxis />\n                <Tooltip />\n                {/* <Legend /> */}\n                {Object.keys(data[0]).map((key, index) => {\n                    if (key !== 'label') {\n                        return (\n                            <Area\n                                key='key'\n                                type='monotone'\n                                dataKey={key}\n                                stroke={ChartColors.area[index]}\n                                fill={ChartColors.area[index]}\n                            />\n                        )\n                    }\n                    return null\n                })}\n            </AreaChart>\n        </ResponsiveContainer>\n    )\n}\n\nexport default ChartArea\n","import React from \"react\";\nimport {\n    Area,\n    Bar,\n    CartesianGrid,\n    ComposedChart,\n    Legend,\n    Line,\n    ResponsiveContainer,\n    Tooltip,\n    XAxis,\n    YAxis,\n} from \"recharts\";\nimport { ChartColors } from \"../../Constants/chart.constants\";\nimport { CHART_DATA_TYPES } from \"../../Dtos/chart\";\n\n/**\n * ChartComposed component to render composed chart.\n *\n * @param data CHART_DATA_TYPES[]\n * @param def object\n * @returns ReactElement\n */\nconst ChartComposed: React.FC<{ data: CHART_DATA_TYPES[]; def: object }> = ({\n    data,\n    def,\n}) => {\n    return (\n        <ResponsiveContainer width=\"100%\" debounce={5} aspect={2}>\n            <ComposedChart width={300} height={300} data={data}>\n                <CartesianGrid strokeDasharray=\"3 3\" />\n                <XAxis dataKey=\"name\" />\n                <YAxis />\n                <Tooltip />\n                <Legend />\n                {Object.keys(def).map((key, index) => {\n                    if (def[key] === \"area\") {\n                        return (\n                            <Area\n                                type=\"monotone\"\n                                dataKey={key}\n                                stroke={ChartColors.area[index]}\n                                fill={ChartColors.area[index]}\n                            />\n                        );\n                    } else if (def[key] === \"bar\") {\n                        return (\n                            <Bar dataKey={key} fill={ChartColors.bar[index]} />\n                        );\n                    } else if (def[key] === \"line\") {\n                        return (\n                            <Line\n                                type=\"monotone\"\n                                dataKey={key}\n                                stroke={ChartColors.line[index]}\n                            />\n                        );\n                    }\n\n                    return null;\n                })}\n            </ComposedChart>\n        </ResponsiveContainer>\n    );\n};\n\nexport default ChartComposed;\n","export const IsArray = ( data: any ) => {\n    if( ! data ) {\n        return false;\n    }\n    return Array.isArray(data);\n}\n\nexport const toSelectOptions = ( values: any[] ) => {\n    return values.map( item => ({ label: item, value: item }))\n}\n\nexport const getOptionFromValue = ( options: any[], value: string ) => {\n    const currentValue = options.filter( option => option.value === value );\n    if( currentValue.length > 0 ) {\n        return currentValue[0];\n    }\n    return null;\n}\n\nexport const isEmptyObject = ( obj: object ) => {\n    if( obj ) {\n        for (var _ in obj) return false;\n    }\n    return true;\n}\n\nexport const isFunction = ( item: any ) => {\n    return item && typeof item === 'function';\n}\n\nexport const hasObjectKey = ( object: any, key: string ) => {\n    return typeof object === 'object' && object.hasOwnProperty(key);\n}\n\nexport const getObjectFromArray = ( array: any[], key: string, value: any ) => {\n    return array.find( object => object[key] === value );\n}\n\nexport const mergeLeftObjects = ( obj1: object, obj2: object ): object => {\n    let newObj = {};\n    for( let key in obj1 ) {\n        newObj[key] = typeof obj2[key] === 'undefined' ? obj1[key] : obj2[key];\n    }\n    return newObj;\n}","import React from 'react'\nimport { Cell, Legend, Pie, PieChart, ResponsiveContainer, Tooltip } from 'recharts'\nimport { ChartColors } from '../../Constants/chart.constants'\nimport { CHART_DATA_TYPES } from '../../Dtos/chart'\n\n/**\n * ChartDonut component to render pie chart.\n *\n * @param data CHART_DATA_TYPES[]\n * @returns ReactElement\n */\nconst ChartDonut: React.FC<{\n    data: CHART_DATA_TYPES[]\n}> = ({ data }) => {\n    return (\n        <ResponsiveContainer width='100%' debounce={5} aspect={2}>\n            <PieChart width={300} height={300}>\n                <Pie\n                    data={data}\n                    dataKey='value'\n                    nameKey='label'\n                    cx='50%'\n                    cy='50%'\n                    innerRadius='45%'\n                    outerRadius='80%'\n                    fill={ChartColors.pie[1]}\n                    label\n                    labelLine={false}\n                >\n                    {data.map((_, index) => (\n                        <Cell\n                            key={`cell-${index}`}\n                            fill={ChartColors.pie[index % ChartColors.pie.length]}\n                        />\n                    ))}\n                </Pie>\n                <Tooltip />\n                <Legend />\n            </PieChart>\n        </ResponsiveContainer>\n    )\n}\n\nexport default ChartDonut\n","import React from 'react'\nimport {\n    Bar,\n    BarChart,\n    CartesianGrid,\n    Cell,\n    ResponsiveContainer,\n    Tooltip,\n    XAxis,\n    YAxis,\n} from 'recharts'\nimport { ChartColors } from '../../Constants/chart.constants'\nimport { CHART_DATA_TYPES } from '../../Dtos/chart'\n\n/**\n * ChartColumn component to render bar chart.\n *\n * @param data CHART_DATA_TYPES[]\n * @returns ReactElement\n */\nconst ChartColumn: React.FC<{\n    data: CHART_DATA_TYPES[]\n    stacked?: boolean\n    showCartesianGrid?: boolean\n}> = ({ data, stacked, showCartesianGrid = true }) => {\n    return (\n        <ResponsiveContainer width='100%' debounce={5} aspect={2}>\n            <BarChart layout='vertical' width={300} height={300} data={data}>\n                {showCartesianGrid && <CartesianGrid horizontal={false} strokeDasharray='3 3' />}\n                <XAxis type='number' />\n                <YAxis dataKey='label' type='category' />\n                <Tooltip />\n\n                {Object.keys(data[0]).length > 2 ? (\n                    Object.keys(data[0]).map((key) => {\n                        if (key !== 'label') {\n                            return (\n                                <Bar key={key} stackId={stacked ? 'stacked' : key} dataKey={key} />\n                            )\n                        }\n                        return null\n                    })\n                ) : (\n                    <Bar dataKey='value'>\n                        {data.map((_, index) => (\n                            <Cell\n                                key={`cell-${index}`}\n                                fill={ChartColors.bar[index % ChartColors.bar.length]}\n                            />\n                        ))}\n                    </Bar>\n                )}\n            </BarChart>\n        </ResponsiveContainer>\n    )\n}\n\nexport default ChartColumn\n","import React from 'react'\nimport { CHART_DATA, CHART_DATA_TYPES } from '../../Dtos/chart'\nimport ChartBar from './chartBar.component'\nimport ChartLine from './chartLine.component'\nimport ChartPie from './chartPie.component'\nimport ChartArea from './chartArea.component'\nimport ChartComposed from './chartComposed.component'\nimport { IsArray } from '../../Utils/common.utils'\nimport ChartDonut from './chartDonut.component'\nimport ChartColumn from './chartColumn.component'\n\ninterface CHART_PROPS {\n    data: CHART_DATA\n    className?: string\n}\n\n/**\n * Chart Component\n *\n * @param props CHART_PROPS\n * @returns ReactElement\n */\nconst Chart: React.FC<CHART_PROPS> = (props) => {\n    const { data, className } = props\n\n    /**\n     * GetChartComponent to get chart by type.\n     *\n     * @param type string\n     * @param data CHART_DATA_TYPES[]\n     * @param def object (optional)\n     * @returns ReactElement\n     */\n    const getChartComponent = ({\n        type,\n        data,\n        data2,\n        def,\n    }: {\n        type: string\n        data: CHART_DATA_TYPES[]\n        data2?: CHART_DATA_TYPES[]\n        def?: object\n    }): React.ReactElement | any => {\n        switch (type) {\n            case 'pie':\n                return <ChartPie data={data} data2={data2} />\n            case 'donut':\n                return <ChartDonut data={data} />\n            case 'bar':\n                return <ChartBar data={data} />\n            case 'column':\n                return <ChartColumn data={data} />\n            case 'bar_stacked':\n                return <ChartBar data={data} stacked />\n            case 'line':\n                return <ChartLine data={data} />\n            case 'area':\n                return <ChartArea data={data} />\n            case 'composed':\n                return <ChartComposed data={data} def={def || {}} />\n            default:\n                return null\n        }\n    }\n\n    return (\n        <div className={`chart-container ${className ?? ''}`}>\n            {IsArray(data.data) &&\n                data.data.length > 0 &&\n                getChartComponent({\n                    type: data.type,\n                    data: data.data,\n                    data2: data.data2,\n                    def: data.def,\n                })}\n        </div>\n    )\n}\n\nexport default Chart\n","import { CHART_DATA_PIE } from '..'\nimport { IsArray } from './common.utils'\n\nexport const pieChartSettings = [\n    {\n        name: 'Labels',\n        type: 'collapse',\n        settings: [\n            {\n                key: 'label',\n                type: 'select',\n                valueType: 'string',\n                defaultValue: (data: any[]) => {\n                    const keys = getStringKeysFromData(data)\n                    return keys[0] || null\n                },\n                isClearable: false,\n            },\n        ],\n    },\n    {\n        name: 'Values',\n        type: 'collapse',\n        settings: [\n            {\n                key: 'value',\n                type: 'select',\n                label: 'Chart Value',\n                valueType: 'number',\n                defaultValue: (data: any[]) => {\n                    const keys = getNumberKeysFromData(data)\n                    return keys[0] || null\n                },\n                isClearable: true,\n            },\n            {\n                key: 'aggregate',\n                label: 'Calculation Function',\n                type: 'radio',\n            },\n        ],\n    },\n]\n\nexport const lineChartSettings = [\n    {\n        name: 'X Axis',\n        type: 'collapse',\n        settings: [\n            {\n                key: 'label',\n                type: 'select',\n                valueType: 'string',\n                defaultValue: (data: any[]) => {\n                    const keys = getStringKeysFromData(data)\n                    return keys[0] || null\n                },\n                isClearable: false,\n            },\n        ],\n    },\n    {\n        name: 'Y Axis',\n        type: 'collapse',\n        settings: [\n            {\n                key: 'value',\n                type: 'select',\n                label: 'Chart Value',\n                valueType: 'number',\n                defaultValue: (data: any[]) => {\n                    const keys = getNumberKeysFromData(data)\n                    return keys[0] || null\n                },\n                isClearable: true,\n            },\n            {\n                key: 'aggregate',\n                label: 'Calculation Function',\n                type: 'radio',\n            },\n        ],\n    },\n]\n\nexport const columnChartSettings = [\n    {\n        name: 'Y Axis',\n        type: 'collapse',\n        settings: [\n            {\n                key: 'label',\n                type: 'select',\n                valueType: 'string',\n                defaultValue: (data: any[]) => {\n                    const keys = getStringKeysFromData(data)\n                    return keys[0] || null\n                },\n                isClearable: false,\n            },\n        ],\n    },\n    {\n        name: 'X Axis',\n        type: 'collapse',\n        settings: [\n            {\n                key: 'value',\n                type: 'select',\n                label: 'Chart Value',\n                valueType: 'number',\n                defaultValue: (data: any[]) => {\n                    const keys = getNumberKeysFromData(data)\n                    return keys[0] || null\n                },\n                isClearable: true,\n            },\n            {\n                key: 'aggregate',\n                label: 'Calculation Function',\n                type: 'radio',\n            },\n        ],\n    },\n]\n\nexport const getStringKeysFromData = (data: any[]) => {\n    if (IsArray(data)) {\n        return Object.keys(data[0]).filter((item) => typeof data[0][item] === 'string')\n    }\n    return []\n}\n\nexport const getNumberKeysFromData = (data: any[]) => {\n    if (IsArray(data)) {\n        return Object.keys(data[0]).filter((item) => typeof data[0][item] === 'number')\n    }\n    return []\n}\n\nexport const getInputSettingsOnly = (settings: any[]) => {\n    let inputs: any[] = []\n\n    settings.map((item) => {\n        if (item.type === 'collapse') {\n            inputs = [...inputs, ...getInputSettingsOnly(item.settings)]\n        } else {\n            inputs = [...inputs, item]\n        }\n    })\n\n    return inputs\n}\n\nexport const getPieChartData = (data: any[], labelKey: string, valueKey: string): CHART_DATA_PIE[] => {\n    return data.map((item) => ({\n        label: item[labelKey],\n        value: item[valueKey] || 0,\n    }))\n}\n\nexport const getLineChartData = (data: any[], labelKey: string, valueKey: string): CHART_DATA_PIE[] => {\n    return data.map((item) => ({\n        label: item[labelKey],\n        value: item[valueKey] || 0,\n    }))\n}\n","import React, { useEffect, useState } from 'react'\nimport AnimateHeight from 'react-animate-height'\nimport './collapse.component.scss'\n\ninterface CollapseProps {\n    title: string\n    children: any\n    collapse?: boolean\n    onChange?: (collapsed: boolean) => void\n}\n\nconst Collapse = ({ title, children, collapse, onChange }: CollapseProps) => {\n    const [collapsed, setCollapsed] = useState(collapse || false)\n\n    useEffect(() => {\n        if (typeof collapse !== 'undefined') {\n            setCollapsed(collapse)\n        }\n    }, [collapse])\n\n    const handleCollapse = () => {\n        if (typeof collapse === 'undefined') {\n            setCollapsed(!collapsed)\n        }\n\n        if (typeof onChange === 'function') {\n            onChange(!collapsed)\n        }\n    }\n\n    return (\n        <div className={`collapse ${!collapsed ? 'open' : ''}`}>\n            <div className='title' onClick={handleCollapse}>\n                {title} <span className='arrow' />\n            </div>\n            <AnimateHeight easing='ease' duration={500} height={collapsed ? 0 : 'auto'}>\n                <div className='controls'>{children}</div>\n            </AnimateHeight>\n        </div>\n    )\n}\n\nexport default Collapse\n","import React, { Fragment, useEffect, useState } from 'react'\nimport Select from 'react-select'\nimport { ChartCategories, ChartItems } from '../../Constants/chart.constants'\nimport {\n    getObjectFromArray,\n    getOptionFromValue,\n    isEmptyObject,\n    isFunction,\n    mergeLeftObjects,\n    toSelectOptions,\n} from '../../Utils/common.utils'\nimport Collapse from '../Collapse/collapse.component'\nimport {\n    getInputSettingsOnly,\n    getNumberKeysFromData,\n    getStringKeysFromData,\n    pieChartSettings,\n    lineChartSettings,\n    columnChartSettings\n} from './../../Utils/chartHelper.utils'\n\nconst BuilderSettings = ({ data, settings, onSettingChange }: any) => {\n    const [settingsData, setSettingsData] = useState(settings || {})\n    const [activeCollapse, setActiveCollapse] = useState<string | null>('chartType')\n    const [currentSettings, setCurrentSettings] = useState<any[]>([])\n    const [currentChart, setCurrentChart] = useState<string>(settings?.chart || 'pie')\n\n    useEffect(() => {\n        setCurrentSettings(getChartSettings())\n    }, [currentChart])\n\n    useEffect(() => {\n        let newSettings: object = getDefaultSettings()\n        if (settings) {\n            let prevSettings = { ...settings }\n            delete prevSettings.chart\n            newSettings = mergeLeftObjects(newSettings, prevSettings);\n        }\n        setSettingsData(newSettings);\n    }, [currentSettings, currentChart])\n\n    useEffect(() => {\n        if (isFunction(onSettingChange)) {\n            onSettingChange(settingsData)\n        }\n    }, [settingsData])\n\n    const handleActiveCollapse = (collapsed: boolean, name: string) => {\n        if (!collapsed) {\n            setActiveCollapse(name)\n        } else {\n            setActiveCollapse(null)\n        }\n    }\n\n    const getChartSettings = () => {\n        switch (currentChart) {\n            case 'pie':\n            case 'donut':\n                return pieChartSettings\n            case 'line':\n            case 'area':\n            case 'bar':\n                return lineChartSettings\n            case 'column':\n                return columnChartSettings\n            default:\n                return []\n        }\n    }\n\n    const handleSettingsChange = (key: string, value: any) => {\n        let newSettings = { ...settingsData }\n        if (isEmptyObject(newSettings)) {\n            newSettings = getDefaultSettings()\n        }\n\n        if (newSettings.hasOwnProperty(key)) {\n            newSettings[key] = value\n            setSettingsData(newSettings)\n        }\n    }\n\n    const getDefaultSettings = () => {\n        const inputs = getInputSettingsOnly(currentSettings)\n        let settings = {\n            chart: currentChart,\n        }\n\n        inputs.map((input) => {\n            let defaultVal = input.defaultValue\n            if (typeof input.defaultValue === 'function') {\n                defaultVal = input.defaultValue(data)\n            }\n            settings[input.key] = defaultVal || null\n        })\n\n        return settings\n    }\n\n    const getSettingsComponent = (settings: any) => {\n        let defaultValue = settings.defaultValue\n        if (typeof settings.defaultValue === 'function') {\n            defaultValue = settings.defaultValue(data)\n        }\n\n        switch (settings.type) {\n            case 'collapse':\n                if (settings.settings.length > 0) {\n                    return (\n                        <Collapse\n                            title={settings.name}\n                            collapse={activeCollapse !== settings.name}\n                            onChange={(collapsed) => handleActiveCollapse(collapsed, settings.name)}\n                        >\n                            {settings.settings.map((setting: any, index: number) => (\n                                <Fragment key={settings.type + setting.key + index}>\n                                    {getSettingsComponent(setting)}\n                                </Fragment>\n                            ))}\n                        </Collapse>\n                    )\n                }\n                return null\n            case 'select':\n                let options: any[] = []\n\n                if (settings.valueType === 'string') {\n                    options = toSelectOptions(getStringKeysFromData(data))\n                } else if (settings.valueType === 'number') {\n                    options = toSelectOptions(getNumberKeysFromData(data))\n                }\n\n                return (\n                    <div className='setting-controls'>\n                        {settings.label && (\n                            <label className='controls-label'>{settings.label}</label>\n                        )}\n                        <Select\n                            value={getOptionFromValue(\n                                options,\n                                typeof settingsData[settings.key] === 'undefined'\n                                    ? defaultValue\n                                    : settingsData[settings.key]\n                            )}\n                            isClearable={settings.isClearable}\n                            options={options}\n                            onChange={(option) =>\n                                handleSettingsChange(settings.key, option?.value || null)\n                            }\n                        />\n                    </div>\n                )\n            \n            default:\n                return null\n        }\n    }\n\n    const getChartItemsElement = (charts: any[]) => {\n        return charts.map((chart, index) => {\n            const chartObj = getObjectFromArray(ChartItems, 'key', chart)\n            return (\n                <div key={index + chart} className='chart-item' onClick={() => setCurrentChart(chart)}>\n                    {chartObj.name}\n                </div>\n            )\n        })\n    }\n\n    return (\n        <div className='builder-settings'>\n            <h1 className='settings-header'>Settings</h1>\n            <div className='setting-items'>\n                <Collapse\n                    title='Chart Type'\n                    collapse={activeCollapse !== 'chartType'}\n                    onChange={(collapsed) => handleActiveCollapse(collapsed, 'chartType')}\n                >\n                    {ChartCategories.map((chartCat, index) => (\n                        <div key={chartCat.name + index} className='chart-category'>\n                            <div className='category-title'>{chartCat.name}</div>\n                            <div className='chart-list'>\n                                {getChartItemsElement(chartCat.charts)}\n                            </div>\n                        </div>\n                    ))}\n                </Collapse>\n\n                {currentSettings.map((setting, index) => (\n                    <Fragment key={setting.name + index}>{getSettingsComponent(setting)}</Fragment>\n                ))}\n            </div>\n        </div>\n    )\n}\n\nexport default BuilderSettings\n","import React, { useEffect, useState } from 'react'\nimport { CHART_DATA } from '../../Dtos/chart'\nimport { getPieChartData, getLineChartData } from '../../Utils/chartHelper.utils'\nimport Chart from '../Chart/chart.component'\nimport BuilderSettings from './builderSettings.component'\n\ninterface CHART_BUILDER_PROPS {\n    data: any\n    settingData?: any\n    onSettingChange?: (settings: any) => void\n}\n\nconst ChartBuilder: React.FC<CHART_BUILDER_PROPS> = ({\n    data,\n    settingData = null,\n    onSettingChange = () => {},\n}) => {\n    const [chartData, setChartData] = useState<CHART_DATA>({ type: 'pie', data: [] })\n    const [chartSettings, setChartSettings] = useState(settingData || {})\n    useEffect(() => {\n\n        let newChartData: CHART_DATA = {\n            type: chartSettings.chart,\n            data: [],\n        }\n\n        if (Object.keys(chartSettings).length > 1) {\n            switch (chartSettings.chart) {\n                case 'pie':\n                case 'donut':\n                    newChartData.data = getPieChartData(\n                        data,\n                        chartSettings.label,\n                        chartSettings.value\n                    )\n                    break;\n                case 'line':\n                case 'area':\n                case 'bar':\n                case 'column':\n                    newChartData.data = getLineChartData(\n                        data,\n                        chartSettings.label,\n                        chartSettings.value\n                    )\n                    break\n            }\n        }\n\n        setChartData(newChartData)\n    }, [chartSettings])\n\n    const handleSettingChange = (settings: any) => {\n        setChartSettings(settings)\n        onSettingChange(settings)\n    }\n\n    return (\n        <div className='chart-builder'>\n            <Chart data={chartData} />\n            <BuilderSettings\n                data={data}\n                settings={chartSettings}\n                onSettingChange={handleSettingChange}\n            />\n        </div>\n    )\n}\n\nexport default ChartBuilder\n","import React, { useState } from 'react'\nimport { ChartBuilder } from 'react-charts-builder'\nimport 'react-charts-builder/dist/index.css'\nimport JSONPretty from 'react-json-pretty'\nimport 'react-json-pretty/themes/monikai.css'\n\n\nconst App = () => {\n    const [settings, setSettings] = useState({})\n    const demoChartData = [\n        {\n            name: 'Sun',\n            date: '1 Dec',\n            sales: 2400,\n            profit: 400,\n        },\n        {\n            name: 'Mon',\n            date: '2 Dec',\n            sales: 2210,\n            profit: 300,\n        },\n        {\n            name: 'Tue',\n            date: '3 Dec',\n            sales: 2290,\n            profit: 100,\n        },\n        {\n            name: 'Wed',\n            date: '3 Dec',\n            sales: 2000,\n            profit: 700,\n        },\n        {\n            name: 'Thu',\n            date: '3 Dec',\n            sales: 2181,\n            profit: 200,\n        },\n        {\n            name: 'Fri',\n            date: '4 Dec',\n            sales: 2500,\n            profit: 900,\n        },\n        {\n            name: 'Sat',\n            date: '4 Dec',\n            sales: 2100,\n            profit: 100,\n        },\n    ]\n\n    const testSettings = {\n        chart: 'bar',\n        label: 'date',\n        value: 'sales',\n        aggregate: null,\n    }\n\n    return (\n        <div>\n            <div style={{ margin: '10px auto', width: '80vw', border: '1px solid #ccc' }}>\n                <ChartBuilder\n                    data={demoChartData}\n                    settingData={testSettings}\n                    onSettingChange={setSettings}\n                />\n            </div>\n            <div style={{ margin: '10px auto', width: '80vw'}}>\n                <JSONPretty id='json-pretty' data={settings}></JSONPretty>\n            </div>\n        </div>\n    )\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}